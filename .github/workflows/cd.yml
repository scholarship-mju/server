name: CD

on:
  push: # main 브랜치에 push(merge) 시 실행
    branches:
      - main

permissions: write-all # 테스트 결과 작성을 위해 쓰기 권한 추가

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 리포지토리 체크아웃
      - uses: actions/checkout@v3

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐시 설정
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. prod 환경 설정용 application.properties 생성
      - name: Make application.properties
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.PROPERTIES }}" > ./src/main/resources/application.properties
        shell: bash

      # 5. 테스트 제외 Gradle 빌드
      - name: Build With Gradle
        run: ./gradlew build -x test

      # 6. Docker 빌드 및 푸시
      - name: Docker Build & Push
        run: |
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/scholarship .
          docker push ${{ secrets.DOCKER_REPO }}/scholarship

      # 7. Docker Compose로 EC2에 배포
      - name: Deploy to Prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker stop scholarship || true
            docker rm scholarship || true
            docker pull ${{ secrets.DOCKER_REPO }}/scholarship
            docker run -d --name scholarship -p 8080:8080 ${{ secrets.DOCKER_REPO }}/scholarship
            docker rmi -f $(docker images -f "dangling=true" -q) || true
